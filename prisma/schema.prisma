// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(CUSTOMER)
  status    UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders Order[]

  @@map("users")
}

model Product {
  id            String   @id @default(cuid())
  slug          String   @unique
  name          String
  description   String   @db.Text
  category      String
  ageRating     String?
  weight        Float?
  price         Float
  originalPrice Float?
  images        Json     // Array of image URLs
  isNew         Boolean  @default(false)
  status        ProductStatus @default(ACTIVE)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  variants ProductVariant[]
  orderItems OrderItem[]

  @@map("products")
}

model ProductVariant {
  id      String  @id @default(cuid())
  name    String
  sku     String  @unique
  price   Float
  stock   Int     @default(0)
  
  // Relations
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("product_variants")
}

model Order {
  id             String        @id @default(cuid())
  orderNumber    String        @unique
  customerName   String
  customerEmail  String
  customerPhone  String?
  shippingAddress Json         // Address object
  shippingMethod String        @default("standard")
  paymentMethod  String        @default("cod")
  subtotal       Float
  shippingCost   Float
  total          Float
  status         OrderStatus   @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  userId String?
  user   User?   @relation(fields: [userId], references: [id])
  items  OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float
  
  // Relations
  orderId         String
  order           Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId       String
  product         Product         @relation(fields: [productId], references: [id])
  productVariantId String
  productVariant  ProductVariant @relation(fields: [productVariantId], references: [id])

  @@map("order_items")
}

model AdminUser {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      AdminRole @default(ADMIN)
  status    AdminStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin_users")
}

// Enums
enum UserRole {
  CUSTOMER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
}

enum AdminStatus {
  ACTIVE
  INACTIVE
}
